local version = "0.00"

dofile("/util/util")

local rangeW
local rangeD
local rangeH

local fileName = shell.getRunningProgram()


function init()
  Gwiber.setPath(fileName)
  Gwiber.init(turtle)
  Gwiber.checkEnchant()
  Alabaster.setPath(fileName)
  Alabaster.init(rangeW, rangeD, rangeH, facing.NORTH)
  Alabaster.initPos(0, 0, 0, facing.NORTH)
end

function initResume()
  Gwiber.setPath(fileName)
  Gwiber.init(turtle)
  Alabaster.setPath(fileName)
  Alabaster.initResume()
end

function createConfigFile()
  file = fs.open(configData, "w")
  file.close()
end

function initAPI(name)
  if (not fs.exists(name)) then
    message("Unable to read API : "..name, msgType.ERROR)
    error()
  end
  os.loadAPI(name)
end

function infoSleep(num)
  if (msgType.INFO) then sleep(num) end
end

-- main function
local args = { ... }
if (not fs.exists(configData)) then
  createConfigFile()
end
dofile(configData)
dofile("/util/util")
initAPI("/API/Gwiber")
initAPI("/API/Alabaster")
initAPI("/API/Algorithm/Breadth_first")
initAPI("/API/Algorithm/Accordion")

if (#args == 0) then
  message("Resume", msgType.DEBUG)
  if (resume) then
    initResume()
  else
    message("Please configuration range.\n".."Usage: "..shell.getRunningProgram().." <width> <depth>", msgType.ERROR)
    error()
  end
elseif (#args == 1) then

end
quarry()
Alabaster.saveLocation()
Alabaster.saveMap()
fs.delete("startup")