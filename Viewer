local version = "0.00"

dofile("/util/util")

local rangeW
local rangeD
local rangeH

local diameter

local fileName = shell.getRunningProgram()
local configData = "/config/"..fileName.."_config"

function init()
  Gwiber.setPath(fileName)
  Gwiber.init(turtle)
  Gwiber.checkEnchant()
  Alabaster.setPath(fileName)
  Alabaster.init(rangeW, rangeD, rangeH, facing.NORTH)
  Alabaster.initPos(0, 0, 0, facing.NORTH)
end

function initResume()
  Gwiber.setPath(fileName)
  Gwiber.init(turtle)
  Alabaster.setPath(fileName)
  Alabaster.initResume()
end

function createConfigFile()
  file = fs.open(configData, "w")
  file.close()
end

function initAPI(name)
  if (not fs.exists(name)) then
    message("Unable to read API : "..name, msgType.ERROR)
    error()
  end
  os.loadAPI(name)
end

function sphere()
  local list
  local min, max = Alabaster.getMapSize()
  local w, d, h
  Circle.initHemisphere(diameter)
  Circle.setSphere(min, max, Alabaster.writeState, 1)
  Alabaster.saveMap()
end

function viewMap()
  repeat
    local char = io.read()
    local h = tonumber(char)
    local min, max = Alabaster.getMapSize()
    if (h ~= nil) then
      if (h >= min.H and h <= max.H) then
        Alabaster.outputMap(h)
      end
    end
  until (char == "exit")
end

-- main function
local args = { ... }
if (not fs.exists(configData)) then
  createConfigFile()
end
dofile(configData)
dofile("/util/util")
initAPI("/API/Gwiber")
initAPI("/API/Alabaster")
initAPI("/API/Circle")

if (#args == 0) then
  message("Resume", msgType.DEBUG)
  if (resume) then
    initResume()
  else
    error()
  end
else
  diameter = tonumber(args[1])
  rangeW = diameter
  rangeD = diameter
  rangeH = diameter
  init()
end

sphere()
viewMap()
Alabaster.saveLocation()
Alabaster.saveMap()
fs.delete("startup")