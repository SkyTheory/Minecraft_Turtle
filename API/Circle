local version = "1.00"

local rad
local inDia
local outDia
local revise

function sphere(rad)
  local rad
  local inDia
  local outDia
  rad = (diameter - 1) / 2
  inDia = (rad - 0.5)^2
  outDia = (rad + 0.5)^2
  revise = 0
end

function sphereDraw()
  for w = minSize.W, maxSize.W do
    for d = minSize.D, maxSize.D do
      for h = minSize.H, maxSize.H do
        return isValid(w, d, h)
      end
    end
  end
end

function isValid1(w, d, h)
  sum = (w - rad)^2 + (d - rad)^2 + (h - rad)^2
  return (sum >= inDia and sum <= outDia)
end

function viewMap()
  repeat
    local char = io.read()
    local h = tonumber(char)
    if (h ~= nil) then
      if (h >= minSize.H and h <= maxSize.H) then
        outputMap(h)
      end
    end
  until (char == "exit")
end

dofile("/util/util")

local args = { ... }
if (#args == 0) then message("please set diameter.", msgType.ERROR) error() end
diameter = tonumber(args[1])

revise = 0
init(diameter, diameter, diameter)
initPos(0, 0, 0, facing.NORTH)
--extendWidthNeg(-rad)
--extendDepthNeg(-rad)
--setState(0, 0, 0, 1)
curve()
viewMap()
printMap()
print(rad)
