local version = "1.01"

local dependAPI = {"GIWCore"}

function init()
  validateDepend()
end

function validateDepend()
  local need = {}
  for key, var in pairs(dependAPI) do
    if (getfenv()[var] == nil) then 
      table.insert(need, dependAPI[key])
    end
  end
  if (#need ~= 0) then
    str = table.concat(need, ", ")
    error("Need API : "..str)
  end
end

function condense()
  prevSlot = turtle.getSelectedSlot()
  for i = 1, 16 do
    for j = 1, i - 1 do
      if (turtle.getItemCount(i) == 0) then break end
      if (turtle.getItemCount(j) == 0 or isIdenticalItem(i, j, "exact")) then
        shiftItem(i, j)
      end
    end
  end
  positionFuel()
  turtle.select(prevSlot)
end

function positionFuel()
  if (Ariadna == nil) then return end
  local sFuelSlot = getLastItem(Ariadna.getFuel())
  if (sFuelSlot == -1) then
    Ariadna.switchFuel()
    sFuelSlot = getLastItem(Ariadna.getFuel())
  end
  if (sFuelSlot ~= -1 and sFuelSlot ~= 16) then
    local flag = shiftItem(sFuelSlot, 16)
    if (flag) then
      Ariadna.setFuelSlot(16)
      for i = 15, sFuelSlot + 1, -1 do
        if (turtle.getItemSpace(sFuelSlot) == 0) then break end
        if (turtle.getItemCount(i) ~= 0) then
          if (turtle.getItemCount(sFuelSlot) == 0 or isIdenticalItem(sFuelSlot, i, "exact")) then
            shiftItem(i, sFuelSlot)
          end
        end
      end
    end
  end
end

function shiftItem(from, to, qty)
  local prevSlot = turtle.getSelectedSlot()
  local itemCount = turtle.getItemCount(from)
  if (turtle.getSelectedSlot ~= from) then
    turtle.select(from)
  end
  if (qty == nil) then
    turtle.transferTo(to)
  else
    turtle.transferTo(to, qty)
  end
  turtle.select(prevSlot)
  return turtle.getItemCount(from) ~= itemCount
end

function getFirstEmptySlot()
  return getNextEmptySlot(0)
end

function getNextEmptySlot(slot)
  for i = slot + 1, 16 do
    if (turtle.getItemCount(i) == 0) then
      return i
    end
  end
  return -1
end

function getLastEmptySlot()
  for i = 16, 1, -1 do
    if (turtle.getItemCount(i) == 0) then
      return i
    end
  end
  return -1
end

function getFirstItem(target, mode)
  return getNextItem(target, 0)
end

function getNextItem(target, slot, mode)
  local var = target
  if (type(var) == "string") then
    var = {name = var}
  end
  for i = slot + 1, 16 do
    if (isIdenticalItem(var, i, mode)) then
      return i
    end
  end
  return -1
end

function getLastItem(target, mode)
  local var = target
  if (type(var) == "string") then
    var = {name = var}
  end
  for i = 16, 1, -1 do
    if (isIdenticalItem(var, i, mode)) then
      return i
    end
  end
  return -1
end

function getItemName(slot)
  local detail = turtle.getItemDetail(slot)
  if (detail ~= nil) then
    return detail.name
  else
    return nil
  end
end

function isIdenticalItem(var1, var2, switch)
  local tbl1
  local tbl2
  if (type(var1) == "number") then tbl1 = turtle.getItemDetail(var1) end
  if (type(var1) == "table") then tbl1 = var1 end
  if (type(var2) == "number") then tbl2 = turtle.getItemDetail(var2) end
  if (type(var2) == "table") then tbl2 = var2 end
  if (tbl1 == nil) then return false end
  if (tbl2 == nil) then return false end
  local mode = {}
  mode["exact"] = {false, false}
  mode["auto"] = {false, true}
  mode["fuzzy"] = {true, true}
  local fList = mode[switch] or mode["auto"]
  local filter = fList[1]
  meta1 = tbl1.metadata or tbl1.damage
  meta2 = tbl2.metadata or tbl2.damage
  if (meta1 == nil) then filter = fList[2] end
  if (meta2 == nil) then filter = fList[2] end
  if (tbl1.name == tbl2.name) then
    if (filter or meta1 == meta2) then
      return true
    end
  end
  return false
end

init()