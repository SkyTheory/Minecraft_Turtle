local version = "1.10"

local moveFn = {}
local attackFn = {}
local digFn = {}
local digEnchant = {}
local detectFn = {}
local inspectFn = {}
local suckFn = {}
local dropFn = {}
local placeFn = {}

local enchant = nil
local excavate = true

local dependAPI = {"GIWCore", "GIWUtil"}

function init()
  validateDepend()
  moveFn[direction.FORWARD] = turtle.forward
  moveFn[direction.DOWN] = turtle.down
  moveFn[direction.UP] = turtle.up
  attackFn[direction.FORWARD] = turtle.attack
  attackFn[direction.DOWN] = turtle.attackDown
  attackFn[direction.UP] = turtle.attackUp
  digFn[direction.FORWARD] = turtle.dig
  digFn[direction.DOWN] = turtle.digDown
  digFn[direction.UP] = turtle.digUp
  digEnchant[direction.FORWARD] = turtle.dig
  digEnchant[direction.DOWN] = turtle.digDown
  digEnchant[direction.UP] = turtle.digUp
  detectFn[direction.FORWARD] = turtle.detect
  detectFn[direction.DOWN] = turtle.detectDown
  detectFn[direction.UP] = turtle.detectUp
  inspectFn[direction.FORWARD] = turtle.inspect
  inspectFn[direction.DOWN] = turtle.inspectDown
  inspectFn[direction.UP] = turtle.inspectUp
  suckFn[direction.FORWARD] = turtle.suck
  suckFn[direction.DOWN] = turtle.suckDown
  suckFn[direction.UP] = turtle.suckUp
  dropFn[direction.FORWARD] = turtle.drop
  dropFn[direction.DOWN] = turtle.dropDown
  dropFn[direction.UP] = turtle.dropUp
  placeFn[direction.FORWARD] = turtle.place
  placeFn[direction.DOWN] = turtle.placeDown
  placeFn[direction.UP] = turtle.placeUp
  checkEnchant()
end

function validateDepend()
  local need = {}
  for key, var in pairs(dependAPI) do
    if (getfenv()[var] == nil) then 
      table.insert(need, dependAPI[key])
    end
  end
  if (#need ~= 0) then
    str = table.concat(need, ", ")
    error("Need API : "..str)
  end
end

function checkEnchant()
  local var = peripheral.getNames()
  local program
  for i = 1, #var do
    local pmnames = peripheral.getMethods(var[i])
    program = peripheral.wrap(var[i])
    -- More Turtles 2.0.0à»ëO
    if (pmnames ~= nil and pmnames[1] == "digSilkTouch") then
      digEnchant[direction.FORWARD] = program.digSilkTouch
      digEnchant[direction.DOWN] = program.digSilkTouchDown
      digEnchant[direction.UP] = program.digSilkTouchUp
      enchant = "SilkTouch"
      return
    end
    if (pmnames ~= nil and pmnames[1] == "digFortune") then
      digEnchant[direction.FORWARD] = program.digFortune
      digEnchant[direction.DOWN] = program.digFortuneDown
      digEnchant[direction.UP] = program.digFortuneUp
      enchant = "Fortune"
      return
    end
    -- More Turtles 2.0.0à»ç~
    program = peripheral.wrap(var[i])
    if (program.getName ~= nil) then
      local name = program.getName()
      if (name == "SilkTouch") then
        digEnchant[direction.FORWARD] = program.dig
        digEnchant[direction.DOWN] = program.digDown
        digEnchant[direction.UP] = program.digUp
        enchant = "SilkTouch"
        return
      end
      if (name == "Fortune") then
        digEnchant[direction.FORWARD] = program.dig
        digEnchant[direction.DOWN] = program.digDown
        digEnchant[direction.UP] = program.digUp
        enchant = "Fortune"
        return
      end
    end
  end
end

function getEnchantName()
  return enchant
end

function setExcavate(flag)
  excavate = flag
end

function move(dir)
  local doMove = false
  local iFlag, iData = inspectFn[dir]()
  local dFlag = detect(dir)
  repeat
    if (iFlag and dFlag) then
      if (not excavate) then break end
      digSuccess = digTurtle(dir, iData)
      if (not digSuccess) then break end
    elseif (iFlag and iData.metadata == 0) then
      if (not isContains(iData, table2)) then break end
    end
    doMove = moveFn[dir]()
    if (not doMove) then
      attackFn[dir]()
    end
  until (doMove)
  return doMove
end

function digTurtle(dir, iData)
  if (isContains(iData, table1)) then return false end
  if (isContains(iData, table3)) then 
    return digEnchant[dir]()
  end
  return digFn[dir]()
end

function getInspect(dir)
  local iFlag, iData = inspectFn[dir]()
  if (not iFlag) then
    iData = {state = {}, name = "minecraft:air", metadata = 0}
  end
  return iData
end

function dig(dir)
  local iData = getInspect(dir)
  return digTurtle(dir, iData)
end

function detect(dir)
  return detectFn[dir]()
end

function inspect(dir)
  return inspectFn[dir]()
end

function suck(dir, qty)
  return suckFn[dir](qty)
end

function drop(dir, qty)
  return dropFn[dir](qty)
end

function place(dir)
  return placeFn[dir]()
end

function isContains(var, table)
  if (var == nil) then return false end
  return (referTable(var.name, var.metadata, table))
end

function isContainsInSlot(var, table)
  if (var == nil) then return false end
  return (referTable(var.name, var.damage, table))
end

function referTable(name, state, table)
  if (name == nil) then return false end
  if (table == nil) then return false end
  for i = 1, #table.list do
  local listname = table.list[i][1]
  local liststate = table.list[i][2]
    if (name == listname) then
      if (liststate == nil) then
        return table.isWhite
      else
        for j = 1, #liststate do
          if (state == liststate[j]) then
            return table.isWhite
          end
        end
      end
    end
  end
  return (not table.isWhite)
end

init()